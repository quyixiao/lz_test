CREATE TABLE `lz_test_interface` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键id',
  `is_delete` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否删除',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '生成时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `space_id` int(11) DEFAULT NULL COMMENT '空间 id',
  `menu_id` int(11) DEFAULT NULL COMMENT '菜单 id',
  `name` varchar(256) DEFAULT NULL COMMENT '接口名称',
  `code` text COMMENT '代码',
  `position` int(11) DEFAULT '0' COMMENT '位置',
  `user_id` int(11) DEFAULT NULL COMMENT '用户 id',
  `real_name` varchar(256) DEFAULT NULL COMMENT '用户名称',
  `file_name` varchar(256) DEFAULT NULL COMMENT '文件名称，用户其他接口 import',
  `git_file_name` varchar(256) DEFAULT NULL COMMENT 'git 文件名',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=90 DEFAULT CHARSET=utf8mb4 COMMENT='接口';


INSERT INTO `lz_test_interface` (`id`, `is_delete`, `gmt_create`, `gmt_modified`, `space_id`, `menu_id`, `name`, `code`, `position`, `user_id`, `real_name`, `file_name`, `git_file_name`)
VALUES
	(48, 0, '2021-03-19 15:02:39', '2021-03-19 15:02:39', 7, 77, 'math函数', '// 2. 取大于等于x的最小的整数值，如果x是一个整数，则返回x  , result:5\nprint(ceil(4.12))\n\n// 3. 把y的正负号加到x前面，可以使用0 , result:   -2\nprint(copysign(2,-3))\n\n// 4. 求x的余弦，x必须是弧度  , result:0.7071067811865476\nprint(cos(3.14159265358979323846/4))\n\n// 5. 把x从弧度转换成角度    , result:45.0\nprint(degrees(3.14159265358979323846/4))\n\n// 7. exp()返回math.e(其值为2.71828)的x次方 ,result : 7.3890560989306504\nprint(exp(2))\n\n// 8. expm1()返回math.e的x(其值为2.71828)次方的值减１, result : 6.3890560989306504\nprint(expm1(2))\n\n// 9. fabs()返回x的绝对值 , result :0.03\nprint(fabs(-0.03))\n\n// 10. factorial()取x的阶乘的值,result : 3628800\nprint(factorial(10))\n\n// 11. floor()取小于等于x的最大的整数值，如果x是一个整数，则返回自身 ,result : 4\nprint(floor(4.999))\n\n// 12. fmod()得到x/y的余数，其值是一个浮点数 ,result : 2.0\nprint(fmod(20,3))\n\n// 14. 对迭代器里的每个元素进行求和操作 ,result : 6\nprint(fsum([1,2,3]))\n\n// 26. pow()返回x的y次方，即x**y , result : 81\nprint(pow(3,4))\n\n// 27. radians()把角度x转换成弧度 , result : 0.7853981633974483\nprint(radians(45))\n\n// 28. sin()求x(x为弧度)的正弦值 ,result : 0.7071067811865475\nprint(sin(3.14159265358979323846/4))\n\n// 29. sqrt()求x的平方根\nprint(sqrt(100))\n\n// 30. tan()返回x(x为弧度)的正切值 , result : 0.9999999999999999\nprint(tan(3.14159265358979323846/4))\n\n\n\n\n\n\n\n\n', 1, 409, NULL, NULL, NULL),
	(49, 0, '2021-03-19 15:11:33', '2021-03-19 15:49:23', 7, 77, 'map支持', 'map1 = {\'username\':\'zhangsan\',\'age\':18}\n\n// 1. 打印张三的名字，result : zhangsan\nprint(map1[\'username\'])\n\n// 2.修改 map1 中的值 , result  : {\'username\': \'lisi\',\'age\': 18}\nmap1[\'username\'] =  \'lisi\'\nprint(map1)\n\n//3.向 map 中添加值 ,result : {\'username\': \'lisi\',\'age\': 18,\'sex\': \'男\'}\nmap1.put(\'sex\',\'男\')\nprint(map1)\n\n//4. 遍历 map1\n// result :\n/**\nusername lisi\nage 18\n*/\nfor(k ,v in map1){\n    if(k == \'sex\'){\n        break\n    }\n    print(k,v)\n}\n// 对 key 遍历\nfor(k in map1.keySet()){\n    print(k)\n}\n// 对 value 遍历\nfor(v in map1.values()){\n    print(v)\n}\n\n\n', 2, 409, NULL, NULL, NULL),
	(50, 0, '2021-03-19 15:54:23', '2021-03-19 15:54:23', 7, 77, '字符串空判断', 'a = null\nb = null\n\n// 1.判断一个字符串是不是空\nif(isBlank(b)){\n    print(\'b is null\')\n}\n\nc = \'\'\nif(isBlank(c)){\n    print(\'c is blank\')\n}\n\n//2.判断一个字符串不是空\nif(!isBlank(c)){\n    print(\'2222 c is blank\')\n}else{\n    print(\'333 c is blank\')\n}\n\n\n//3.判断一个字符串不是空\nif(isNotBlank(c)){\n    print(\'4444 c is blank\')\n}else{\n    print(\'55555 c is blank\')\n}\n\n', 3, 409, NULL, NULL, NULL),
	(51, 0, '2021-03-19 16:10:04', '2021-03-19 16:48:50', 7, 77, 'string类型及使用', 'a = \'abcdefg\'\n// 1.获取第0个位置的字符 , result : a\nprint(a[0])\n\n// 1.1获取第0个位置的字符 , result : f\nprint(a[-2])\n\n// 2.字符串分组, 截取从0 到倒数第一个字符，包含第0个字符 ，但是不包含倒数第一个字符,result : abcdef\nprint(a[:-1])\n\n// 3. 截取从第2到第4个字符 ，包含第二个字符 ，不包含第4个字符,result : cd\nprint(a[2:4])\n\n\n// 4.截取第1个字符到最后一个字符，包含第0个字符 ，result : bcdefg\nprint(a[1:])\n\n', 4, 409, NULL, NULL, NULL),
	(52, 0, '2021-03-19 17:03:12', '2021-03-19 17:03:12', 7, 77, '三目运算符', 'def max(a ,b ){\n    return a > b ? a : b \n}\n// 三元表达式\nprint(max(1,2))\n\n\n// 嵌套三目运算符\ndef max2(a,b,c){\n    return a > b ? a > c ? a : c : b > c ? b : c \n}\nprint(max2(1,2,10))', 5, 409, NULL, NULL, NULL),
	(53, 0, '2021-03-19 17:16:35', '2021-03-19 17:16:35', 7, 77, '时间处理', 'a = time()\n\n// 1.打印当前时间毫秒值\nprint(a)\n\n// 2.格式化日期\nprint(sdf(\'yyyy-MM-dd HH:mm:ss\',a))\n\n// 3.获取当前时间的毫秒值\nb = date().getTime()\nprint(b)\n\n//4.也可以直接将日期格式化为字符串类型\nprint(sdf(\'yyyy-MM-dd HH:mm:ss\',date()))\n\n//5.时间转日期\nprint(date(a))\nprint(type(date(a)))\n\n\n', 6, 409, NULL, NULL, NULL),
	(54, 0, '2021-03-19 17:28:33', '2021-03-19 17:28:33', 7, 77, 'for循环语法', 'for(i in range(1,10)){\n    print(i)\n}\n\nprint(\'*\'*30)\n\nlabel_1:            //可以使用label，来终止多层嵌套循环\nfor(i in range(1,10)){\n    for(j in range(1,10)){\n        if(j > 5 ){\n            break label_1\n        }\n        print(i,j)\n    }\n}\n\nprint(\'打印 list \')\nlist = [\"zhangsan\",2,\"wangwu\",{\"age\":1,\"username\":\"184xxx\"}]\nfor(i ,item in list){\n    print(i,item )\n}\n\n\nprint(\"打印 map\")\nmymap = {\"username\":\"张三\",\"password\":\"123456\",\"age\":1}\nfor(k,v in item ){\n    print(k,v)\n}\n\n', 7, 409, NULL, NULL, NULL),
	(55, 0, '2021-03-19 17:43:15', '2021-03-19 17:43:15', 7, 77, 'while 语法支持', 'a = 1\nwhile(a < 10){\n    print(a)\n    a ++\n}\n\nprint(\'*\'*30)\n\nb = 1\n\nlable_1:                //可以使用 label_1来终止多层嵌套\nwhile(true){\n    switch(b){\n        case 5 :\n            break lable_1\n        default:\n            print(b)\n            break;\n    }\n    b ++\n}\n\n\ni = 0 \nlable_2 :                   // while 里有 for 也是支持的\nwhile(i < 10 ){\n    for(j in range(5 )){\n        print(i ,j )\n        if(j == 2 ){\n            break lable_2   \n        }\n    }\n    i ++\n}\n\n\ni = 0 \ndo{                     // 支持 do {}  while (condition) 语法\n    i ++\n    print(i)\n}while(i < 10)\n', 8, 409, NULL, NULL, NULL),
	(56, 0, '2021-03-19 17:55:15', '2021-03-19 17:55:15', 7, 77, 'return语句使用', 'def a (x,y){\n    return x , y\n}\n\na,b = a (1,2)\nprint(a,b)', 9, 409, NULL, NULL, NULL),
	(57, 0, '2021-03-19 17:57:55', '2021-03-19 19:32:41', 7, 77, '异常被捕获的情况', 'def xx(){\n    a = 1\n    if(a == 1){\n         print(\'xxxxxxxxxxxx\')\n         try{\n             c = 0 \n             d = a / c \n         } catch (e){\n             e.printStackTrace() \n         }finally{\n             print(\'程序执行完成\')\n         }\n    }\n}\nxx()\nprint(\'-------------------------\')', 10, 409, NULL, NULL, NULL),
	(58, 0, '2021-03-19 19:32:27', '2021-03-19 19:32:27', 7, 77, '异常没有被捕获的情况', 'def xx(){\n    a = 1\n    if(a == 1){\n        c = 0 \n        d = a / c \n    }\n}\nxx()\nprint(\'-------------------------\')', 11, 409, NULL, NULL, NULL),
	(59, 0, '2021-03-19 19:47:34', '2021-03-19 19:48:29', 7, 77, '加密算法', '// 1. SHA-256加密 ,result : a5bf4df04790c0e3ea477554382a0dbd7dd75298c09e35e72d5bcda0e877cb62\nprint(sha256(\'netType=xxxx&userName=184xxx\'))\n\n// 2. md5 加密 ,result :  f561aaf6ef0bf14d4208bb46a4ccb3ad\nprint(md5(\'xxx\'))\n', 12, 409, NULL, NULL, NULL),
	(60, 0, '2021-03-19 19:49:39', '2021-03-19 19:49:39', 7, 77, '方法参数初始化默认值', 'def max(a =5 ,b ){\n    return a > b ? a : b\n}\nprint(max( b = 3 ))                 \n', 13, 409, NULL, NULL, NULL),
	(61, 0, '2021-03-19 19:51:35', '2021-03-19 19:51:35', 7, 77, '方法作为方法参数使用', 'def findMax(a,b,max){\n    return max(a,b)\n}\n\ndef max(a ,b ){\n    return a > b ? a : b\n}\n\n\n//1. 将方法作为参数传递进另外一个方法\nprint(findMax(a = 1 ,5,max))\n', 14, 409, NULL, NULL, NULL),
	(62, 0, '2021-03-19 19:56:04', '2021-03-19 19:56:04', 7, 77, '方法内嵌套方法，方法作为方法参数返回', 'def max (){\n    def realMax (a,b){\n        return a > b ? a : b\n    }\n    return realMax\n}\n\nfun = max()\n\n\n//1.获取一个方法，并调用这个方法\nprint(fun(1,2))\n\n', 15, 409, NULL, NULL, NULL),
	(63, 0, '2021-03-19 19:59:09', '2021-03-19 19:59:09', 7, 77, 'python 语法，方法柯里化', 'def add(x){\n    def _fn(y){\n        return x + y\n    }\n    return _fn\n}\n\n// 处理返回值是方法的处理\nt = add(4)(5)\n// result : 9\nprint(t)\n\n', 16, 409, NULL, NULL, NULL),
	(64, 0, '2021-03-19 20:00:49', '2021-03-19 20:00:49', 7, 77, '日志打印方法的请求参数和返回参数', 'def add (x,y){\n    return x + y\n}\n\ndef logger(x,y){\n    print(\'before\',x,y)\n    ret = add(x,y)\n    print(\'end \',ret)\n    return ret\n}\n\nlogger(4,5)\n\n', 17, 409, NULL, NULL, NULL),
	(65, 0, '2021-03-19 20:02:45', '2021-03-19 20:02:45', 7, 77, '测试局部变量问题', 'def out2(){\n    o = 65\n    def inner(){\n        o = 97\n        print(\'11111\',o)\n    }\n    inner()\n    print(\'222222\',o)\n}\n\n// 测试 局部变量问题\nout2()\n\n', 18, 409, NULL, NULL, NULL),
	(66, 0, '2021-03-19 20:05:04', '2021-03-19 20:05:04', 7, 77, '内层方法修改全局变量时，无效', 'i = 1 \ndef modify(){\n    i = 2 \n}\nprint(i)', 19, 409, NULL, NULL, NULL),
	(67, 0, '2021-03-20 17:01:26', '2021-03-20 17:01:26', 7, 77, '集合元素在方法中添加问题', 'def counter(){\n    c = [0]\n    def inc(){\n        c[0] += 1\n        return c[0]\n    }\n    return inc\n}\n\nfoo = counter()\nprint(foo(), foo())\nprint(foo())', 20, 409, NULL, NULL, NULL),
	(68, 0, '2021-03-20 17:20:46', '2021-03-20 17:20:46', 7, 77, '方法局部变量问题', 'def foo(xyz=[]){\n    xyz.add(100)\n    print(xyz)\n}\n\nfoo()\nfoo()\nfoo()', 21, 409, NULL, NULL, NULL),
	(69, 0, '2021-03-20 17:21:41', '2021-03-20 17:43:31', 7, 77, '方法参数可自定义默认值', 'def foo(w ,u = \'abc\',z = 123){\n    u  = \'xyz\'\n    z = 789\n    print(w,u,z)\n}\n\nfoo(\'mage\')\n\n\ndef foo2(w ,u = \'abc\',z = 123){\n    print(w,u,z)\n}\n\n//在方法调用传值时，可以为方法参数指定值\nfoo2(\'mage\',z=\'123456\')\n\n\n\ndef foo3(w ,u = \'abc\',z = 123){\n    print(w,u,z)\n}\n\nfoo3()', 22, 409, NULL, NULL, NULL),
	(70, 0, '2021-03-21 09:28:09', '2021-03-21 09:28:09', 7, 77, '简单的排序算法', 'def bubble_sort(nums){\n    for (i in range(len(nums) - 1)){        // len 函数，计算list 的长度\n        for(j in range(len(nums) - i - 1)){\n            if (nums[j] > nums[j + 1]){\n                temp = nums[j]\n                nums[j] = nums[j+1]\n                nums[j+1] = temp\n            }\n        }\n    }\n    return nums\n}\n\n// 对list进行排序\nprint(bubble_sort([1,2,8,3,4,5]))\n', 23, 409, NULL, NULL, NULL),
	(71, 0, '2021-03-21 09:31:46', '2021-03-21 09:41:07', 7, 77, '* args 和 * kwargs 的应用场景，打印方法的方法的请求参数和返回参数', 'def add(x, y){\n    return x + y\n}\n\ndef add1(x, y, z=6){\n    return x + y + z\n}\n\n\ndef logger(fn, *args, **kwargs){\n    print(\'before\', args)\n    print(\'before\', *args)\n    print(\'before\',**kwargs)\n    ret = fn(*args, **kwargs)\n    print(\'end \', ret)\n    return ret\n}\n\nlogger(add, 4, 5)\n\nlogger(add1, 4, 5, z=7)\n\n\n\n\n\n\n\n\n\n', 24, 409, NULL, NULL, NULL),
	(72, 0, '2021-03-21 09:44:20', '2021-03-21 09:44:20', 7, 77, '柯里化的日志打印场景', 'def add1(x, y, z=6){\n    print(\'*\'*30,x,y,z)\n    return x + y + z\n}\n\ndef logger(fn){             // python 柯里化\n    def _logger(*args, **kwargs){\n        print(\'before\', *args,**kwargs)\n        ret = fn(*args, **kwargs)\n        print(\'end \', ret)\n        return ret\n    }\n    return _logger\n}\n\nt = logger(add1)\n\nt(4,9,20,z=10)\n\nprint(\'----------------------------------\')\n\nlogger(add1)(1,2,10, 3 )\n', 25, 409, NULL, NULL, NULL),
	(73, 0, '2021-03-21 09:48:28', '2021-03-21 09:48:28', 7, 77, '基于注解的方式用柯里化打印请求参数返回参数', 'def logger(fn){\n    def wrapper(*args, **kwargs){\n        print(\'before\', *args)\n        ret = fn(*args, **kwargs)\n        print(\'end \', ret)\n        return ret\n    }\n    return wrapper\n}\n\n@logger\ndef add1(x, y,z=6){\n    return x + y + z\n}\n\n\nadd1(4, 5)\n\nadd1(4, 5,9)', 26, 409, NULL, NULL, NULL),
	(74, 0, '2021-03-21 09:51:48', '2021-03-21 09:51:48', 7, 77, '柯里化的复杂嵌套使用', 'def cc(n){\n    print(n)\n    def logger(x){\n        print(x)\n        def _logger(fn){\n            def wrapper(*args, **kwargs){\n                print(n,x)\n                print(\'before\', *args)\n                ret = fn(*args, **kwargs)\n                print(\'end \', ret)\n                return ret\n            }\n            return wrapper\n        }\n        return _logger\n    }\n    return logger\n}\n\n\n@cc(7)(5)\ndef add1(x, y,z=6){\n    return x + y + z\n}\n\nadd1(4, 5)\n\nadd1(4, 5,9)', 27, 409, NULL, NULL, NULL),
	(75, 0, '2021-03-21 09:58:06', '2021-03-21 09:58:06', 7, 77, '柯里化每个方法执行超时，打印超时时间', 'def logger(x){\n    def _logger(fn){\n        def wrapper(*args, **kwargs){\n            print(\'before\', *args)\n            preTime = time()\n            ret = fn(*args, **kwargs)\n            afterTime = time()\n            print(\'end \', ret)\n            if(afterTime - preTime > 2000){\n                print(fn , \'超时\')\n            }\n            return ret\n        }\n        return wrapper\n    }\n    return _logger\n}\n\n@logger(2000)\ndef add1(x,y){\n    sleep(1000)\n    return x + y\n}\n\n@logger(3000)\ndef add2(x,y,z){\n    sleep(3000)\n    return x + y + z\n}\n\nadd1(4,5)\nadd2(4,5,6)', 28, 409, NULL, NULL, NULL),
	(76, 0, '2021-03-21 10:10:10', '2021-03-21 10:10:10', 7, 77, '加深柯里化的理解，偷天换日', 'def copy_properties(src){               //  src 是 b 方法\n    def inner(dest){                    // dest 是 add 方法 \n        print(src)\n        print(dest)\n        return src //通过注解参数替换掉原来的方法\n    }\n    return inner\n}\n\ndef b (){\n    x = 1\n    return x\n}\n\n@copy_properties(b)\ndef add(x ,y ){\n    return x + y\n}\n\nprint(add(4,5))\n\n', 29, 409, NULL, NULL, NULL),
	(77, 0, '2021-03-21 10:15:57', '2021-03-21 10:15:57', 7, 77, '柯里化属性后天获得', 'def logger(fn){\n    def wrapper(*args, **kwargs){\n        print(\'before\', *args)\n        ret = fn(*args, **kwargs)\n        print(\'end \', ret)\n        return ret\n    }\n    return wrapper\n}\n\n@logger\ndef add1(x ,y ){\n    return x + y\n}\n\n//方法add2原来没有柯里化属性，可以在程序的执行过程中为其添加柯里化属性\ndef add2(x ,y ,z ){\n    return x + y + z\n}\nadd1(3,4,5)\n\nprint(\'-\'*30)\nprint(add2(1,2,3))\nprint(\'*\'*30)\n\n\nadd2.methodData = add1.methodData\n\nprint(add2(1,2,3))', 30, 409, NULL, NULL, NULL),
	(78, 0, '2021-03-21 10:25:24', '2021-03-21 10:25:24', 7, 77, '柯里化方法的复杂使用场景，多层柯里化嵌套', 'def copy_properties(src){\n    def inner(dest){\n        print(src)\n        print(dest)\n        return dest\n    }\n    return inner\n}\n\n\ndef log(mm){\n    print(\'*\'*30,mm)\n    return mm\n}\n\n\n@log\ndef logger(exet, func){                     // 为每个方法打印日志\n   @log\n    def yy(){\n        @log\n       def xx(vv){\n           @log\n           def _logger(fn){\n               @copy_properties(func)\n               def wrapper(*args, **kwargs){\n                    print(vv)\n                   print(\'mmmmmm\',args)\n                   print(\'xxxxxxxx\',exet)\n                   ret = fn(*args, **kwargs)\n                   print(\'nnnnnnnnnnnnnnnnnnnn\',fn)\n                   print(m)\n                   print(\'xxxxxxxxxx\')\n                   func(*args, **kwargs)\n                   return ret\n               }\n               m = \'wwwwwwwwwwwwwwwwwwww\'\n               return wrapper\n           }\n           return _logger\n       }\n       return xx\n    }\n    return yy\n}\n\ndef b (){\n    x = 1\n    return x\n}\n\n@logger(2000,b)(10)(33)\ndef add(x ,y){\n    print(\'.........\',x,y)\n    return x + y\n}\n\nprint(add(4,5))\n\n\n', 31, 409, NULL, NULL, NULL),
	(79, 0, '2021-03-21 10:34:05', '2021-03-21 10:34:05', 7, 77, 'lambda简单的使用场景', 'print((lambda x: x * 2)(4))\nb = lambda x: x * 2\nprint(b(4))\n\n\nfoo = lambda x, y: (x + y) * 2\nprint(foo(1,2))\n\n\nprint(\'*\' * 30 ,(lambda x, y=3: x + y)(5))\nprint(\'-\'* 30 ,(lambda x, y=3: x + y)(5, 6))\n\nprint(\'*\' * 30 ,(lambda x, y=30: x + y)(5))\nprint(\'5\',(lambda x, y=30: x + y)(5, y=10))\n\n', 32, 409, NULL, NULL, NULL),
	(80, 0, '2021-03-21 10:49:30', '2021-03-21 10:49:30', 7, 77, '你不知道的 list和 lambda 的使用场景', 'a = [x for (x in range(5))]             // list的另外一种使用场景\nprint(a)\nprint((lambda *args: [x + 1 for (x in args)])(*range(5)))', 33, 409, NULL, NULL, NULL),
	(81, 0, '2021-03-21 10:55:32', '2021-03-21 10:55:32', 7, 77, 'lambda作为方法参数使用', 'def max(x,y,method=lambda x ,y: x > y ? x : y ){\n    return method(x,y)\n}\nprint(max(1,3))\n\n', 34, 409, NULL, NULL, NULL),
	(82, 0, '2021-03-21 13:52:52', '2021-03-21 15:54:31', 7, 77, '基本语法', 'print(1,\'*\'*10,\'1 + 2 =\',1 + 2 ) //+ 运算符\nprint(2,\'*\'*10, \'2 - 1 = \', 2-1 )  // - \nprint(3,\'*\'*10, \'3 * 5 =\' , 3 * 5 ) // * \nprint(4,\'*\'*10, \'4 / 3 = \', 4 / 3 )  // /\nprint(5,\'*\'*10, \'4 / 3.0= \', 4 / 3.0 ) // \nprint(6,\'*\'*10, \'4 / 3.00=\' , 4 / 3.00 ) // 小数位会四舍五入\nprint(7,\'*\'*10, \'10 % 3 = \' , 10 % 3 ) // 取余\n\ni1 = 1\nprint(8,\'*\'*10, \'i ++ = \' , i1 ++)     // i ++\n\ni2 = 1 \nprint(9,\'*\'*10 , \'++i = \', ++i2)           // ++ i \n\ni3 = 1 \nprint(10 ,\'*\'*10 , \' i -- =\', i3 --  )    // i -- \n\ni4 = 1 \nprint(11, \'*\' * 10 , \'-- i =\' ,-- i4 )      // --i \n\ni5 = 1 \nprint(12 , \'*\' * 10 , \'i += 1 = \', i5 += 1 )  // += \n\ni6 = 1 \nprint(13 , \'*\' * 10 , \'1 -= 1 = \', i6 -= 1 )    // -= \n\ni7 = 2 \nprint(14 , \'*\' * 10 , \'2 *= 3 = \' ,i7 *= 3 )        // *= \n\n\ni8 = 10 \nprint(15 , \'*\' * 10 , \'10 /= 3 \' , i8 /= 3 )         // /= \n\n\ni9 = 10 \nprint(16, \'*\' * 10 , \' 10 %= 3\' , i9 %= 3 )         //  %= \n\nprint(17 , \'*\' * 10 , \' 3 > 2 \' , 3 > 2 )           // > \nprint(18 , \'*\' * 10 , \'3 >= 3 \', 3 >= 3 )           // >= \nprint(18, \'*\' * 10 , \' 3 < 2 \' , 3 < 2 )            // <\nprint(19, \'*\' * 10 , \'3 <= 3 \', 3 <= 3 )        // <= \nprint(20, \'*\' * 10 , \'3 == 3 \' , 3 == 3 )       // == \nprint(21 , \'*\' * 10 , \'3 != 3 \' , 3 != 3 )      // != \n\n\n//“ & ”和“ && ”的区别：单与时，左边无论真假，右边都进行运算；\n//双与时，如果左边为真，右边参与运算，如果左边为假，那么右边不参与运算。\n// （1）按位与（ & ） ：两边都为true，结果是true，否则为false；\ni10 = 1 \nprint(22 ,\'*\'*10 , \'false && ++i == 2 \' , false && ++i10 == 2  , i10 )\ni11 = 1 \nprint(23 ,\'*\'*10 , \'false & ++i == 2 \' , false & ++i11 == 2 , i11 )\n\n\n//（2）按位或（ | ） ：两边都为false，结果是false,否则为true;\n//（6）“ | ”和“ || ”的区别：单或时，左边无论真假，右边都进行运算；双或时，左边为真，右边不参与运算。\ni12 = 1\nprint(24 , \'*\'*10 , \'true || ++i == 2 \', true || ++i12 == 2 ,i12)\ni13 = 1\nprint(25 , \'*\'*10 , \'true | ++i == 2 \', true | ++i13 == 2 ,i13)\n\n//（3）异或（ ^ ）： 两边相同为false，两边不同为true。\ni14 = 1 \nprint(26 , \'*\'* 10 , \'true^true = \' ,true ^ true  )\nprint(27 , \'*\'* 10 , \'false^true = \' ,false ^ true  )\n\n// （4）非（ ！）：非真则假，非假则真。\nprint(28, \'*\'*10, \'!true\', !true)\n\n\n//左移操作“<<”：将运算数的二进制码整体左移指定位数，左移之后的空使用“0”来补充，\n//移出去的二进制数忽略不计。（<<：相当于给原数乘以2的倍数）\nprint(29, \'*\'*10 , 1 << 3 )       \n\n//（2）右移操作“>>”：将运算数的二进制码整体右移指定位数，右移之后的空使用“符号位”来补充。移出去的二进制数忽略不计\n//。若是正数使用“0”补充，若是负数使 用“1”补充；（>>：相当于给原数除以2的倍数）\nprint(30, \'*\'*10 , 24 >> 3 )   \n\n\n//（3）& 按位与运算原则：相同二进制数位上数值为1，结果为1，否则结果为0；\nprint(31,\'*\' * 10 , 1 & 2 )\n\n// （4）| 按位或运算原则：相同二进制数位上数值为0，结果为0，否则结果为1；\nprint(32,\'*\' * 10 , 1 | 2 )\n\n// （5）^ 按位异或运算原则：参与运算的两个数相应位相同则结果为0，异号则为1；\nprint(33,\'*\' * 10 , 1^2 )\n\n\n//（6）~ 按位取反运算原则：二进制数位上0变1，1变0。\nprint(34,\'*\' * 10 , ~2 )\n\n\ni35 = 10  \nprint(35 , \'*\'*10 , i35 &= 2 )                          // &= \n\ni36 = 10 \nprint(36, \'*\'*10 , i36 != 2 )                           // != \n\n\ni37 = 10 \nprint(37, \'*\'*10 , i36 ^= 2 )                           // ^= \n\ni38 = 10 \nprint(38, \'*\'*10 , i36 %= 3 )                           // %= \n\ni39 = 10 \nprint(39 , \'*\' * 10 , i39 <<= 3 )                       // <<= \n\n\ni40 = 10 \nprint(40, \'*\' * 10 , i40 >>= 2 )                        // >>= \n\n\ni41 = 10 \nprint(41, \'*\' * 10 , i41 >>>= 3 )                       // >>>= \n\n', 35, 409, NULL, NULL, NULL),
	(83, 0, '2021-03-21 16:16:15', '2021-03-22 15:00:15', 7, 77, '1.登陆接口', 'global url_pre = \'http://localhost:8080/lt-web\'\n\nlogin_url = url_pre + \"/user/login\"\n\ndef login(username,password){\n    headers = {\'Content-Type\': \'application/json;charset=UTF-8\'}\n    return open(login_url,\'POST\',headers,data = {\"username\":username,\"password\":password}  )\n}\n\nresp = login(username=\'zc\',password=\'admin\')\n\nprint(resp)\n\nglobal token = json(resp)[\'data\'][\'token\']\nprint(token)', 36, 409, NULL, NULL, NULL),
	(84, 0, '2021-03-21 16:21:46', '2021-03-21 16:25:35', 7, 77, '2.获取用户信息', 'import token,url_pre\n\nget_user_info_url = url_pre + \"/user/getUserInfo\"\n\n\ndef getUserInfo(token){\n    headers = {\'Content-Type\': \'application/json;charset=UTF-8\'}\n    return open(get_user_info_url,\'POST\',headers,data = {\"token\":token}  )\n}\n\nresp = getUserInfo(token)', 37, 409, NULL, NULL, NULL),
	(85, 0, '2021-03-21 16:36:24', '2021-03-21 17:00:44', 7, 77, '1.export a ', '\na = 1 \nexport a = a + 5  ,b = 2 \n', 38, 409, NULL, NULL, NULL),
	(86, 0, '2021-03-21 16:37:32', '2021-03-21 16:44:48', 7, 77, '2.import a ', 'import a \nprint(\"第二个接口中导入变量 a\",a)', 39, 409, NULL, NULL, NULL),
	(87, 0, '2021-03-21 16:38:06', '2021-03-21 17:08:20', 7, 77, '3. import a', 'import a \n\nprint(\"第三个接口中变量 a\",a)', 40, 409, NULL, NULL, NULL),
	(88, 0, '2021-03-21 17:22:17', '2021-03-21 17:22:17', 7, 77, '异常测试接口', 'a = 1 \nb = 0\nc = a / b ', 41, 409, NULL, NULL, NULL),
	(89, 0, '2021-03-22 14:20:00', '2021-03-22 15:02:27', 7, 77, '上传身份证', 'url_pre = \'http://localhost:8080/lt-web\'\n\n\nuserName = \'zhangsan\'\n\nheaders = {\'Content-Type\': \'application/json;charset=UTF-8\'}\n\nresp = upload(  url_pre + \'/upload/uploadOCRPhoto\', \\\n    data = {\'userPhone\':userName,\'type\':\'front\'}, \\\n    files = {\'file\':\'http://my-wallet.oss-cn-hangzhou.aliyuncs.com/ppl/test/timg1.jpeg.jpeg\'})\n\nprint(resp)\n\n\nif(number(code) == 1321){\n    print(\'xxxxxxxxxxxxxxxxxxxx\')\n    throw new Exception(\'可能有错\')\n}\n\n\n\n\n', 42, 409, NULL, NULL, NULL);






